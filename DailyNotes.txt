
Corejava:
===========

programming language:
======================

language:communication

	communication with machine

OOP
	JAVA-->oops features-->inheritance,polymorphisam,abstraction,encapsulation
	
	
	java 1996 23 jan
	
	
	JDK 1.0
	
	21  -->James gosling
	
	sun micro system
		-->oracle corporation
	
				JSE 			JEE           JME
	
1)standalone/desktop applications :corejava,awt,swings,applets..JSE
2)web applications url			  :servlets,jsp,spring mvc,MVC...
3)distributed applications		  :webservices
4)mobile applications			  :android
	
	
	welcome to java 
	
	
	java 
	
			.java
	
	
	
	Platform independent:WORA
	Garbage collection
	
	
	
	
	keywords:53 -->lower case 
	
	
	
	Identifiers:
		
	any name in java will call it as identifier

	a-z
	A-Z
	0-9
	$
	_
		
variables:
===========
		name of a memory location

	local 
	global 

syntax:	
	
	datatype varname=value;
	
	
	empid,ename,esal,eadd,eage,....
	
		PDT 			NPDT
		8 PDT			String,array,emp,....
	
	
		byte	1 byte		-128 to 127
		short	2 bytes		-32768 to 32767
		int		4 			-2147483768 to 2147483767
		long	8			-2 power 63 	-2 power 63  
		
		float	4			5 to 6  19000.78293920737f
		double	8			14-15 
			
		char	2 bytes			'M' unicode-18 
		boolean	1 bit		true,false
							byte age=32
	
							long age=32


A-65	english
a-97



global varibles-->static,instance

syntax
		when there is static keyword that is static variable
		if there is no static keyword that is instance variable

memory
	static properties will get one time memory at the time class loading into JVM
	instance properties will get memory for every object creation
	
			A classname objname=new classname();
				A obj=new A();
				A obj1=new A();

access
		instance properties can be accessed by using obj ref
		static properties can be accessed by using classname

usage 

				orgname="NEC",countryName,cityName,schoolname,collegename,....static
				
				aadharno,contact,pan,accno,....instance
package,import



user defined 

OOPS


	inheritance,polymorphisam
	abstraction ,encapsulation



inheritance:Code Reusability

extends,implementes

class A
{
//20 variables
//200 methods
}

class B extends A
{
//20 methods

}

By default parent class for every java class is java.lang.Object;
By default package class for every java file is java.lang;



MI not supported by java through classes
MI  supported by java through interfaces


	class Parent         class Parent1
		{					{
		m1()				m1()
		{					{
		12+13;				12-13;
		}					}

	}							}
	
	
	class Child extends Parent,Parent1
	{
	
	Child child1=new Child();
		child1.m1();//25,-1
		
	
	}
	}
	
	
	
	
		interface Parent       interface Parent1
		{					{
		m1();				m1();

	}							}
	
	
	class Child implements Parent,Parent1
	{
	
	Child child1=new Child();
		child1.m1();//25,-1
		
	
	}
	m1()
	{
	
	}
	}

Abstraction:
===========
		hiding internal details by showcasing functionality-->secuirty

		withdraw   balenq
		pinchange  ministate
	
	concrete method:method with body/implementation
	abstract method:method without body/implementation
	
		class		 :its collection of only concrete methods/non-abstract methods
		
		abstract class :its combination of both abstract and concrete	0-100%
		
		interfaces :its a collection of only abstract methods			100%
		
				by default interface methods public abstract 
	
Polymorphisam:-	
	
Method Overloading:	
	method name is same  signature is different
							no of params
							order of params
							type of params
	
method Overriding:

	method name is same  body is different 


final

public	:every where
private	:only inside the class
default :package level scope
protected:defautlt+outside the package inside the child class

constructor

this	used to represent current class properties(variable,method,constructor,object)
super	used to represent parent class properties(variable,method,constructor)






encapsulation
	
		wrapping the data and methods together 
		

exception handling


try,catch,finally,throw,throws


throwable 








collections
=============

int a=123;
a=124;


	arrays
	int ids[]={12,21,67,65,9,67};
	//index 0,1,2,3,..


1)array size fixed
2)only homogeneous
3)no utility methods


collections framework



1)collections are not fixed size /growable in nature
2)both homogeneous/haterogeneous
3)lots of utility methods

mysql
create database NEC;
use NEC;
#@sql
#DDL :create,alter,drop,truncate,rename
#DML :insert,update,delete
#DRl :select

create table products(productid int,productName varchar(15),productprice int,productCategory varchar(15));
describe products;
alter table products add productQuantity int;
alter table products drop productQuantity;
alter table products change productid pid int;
alter table products rename to products_info;#renaming table name 
truncate table products_info;#rows/data/records
drop table products_info;
insert into products values(123,'samsung',34000,'electronics');
insert into products values(124,'dell',38000,'electronics');
insert into products values(125,'tiger',44000,'toys');
insert into products values(126,'dal',22866,'groceries');
insert into products values(127,'apple',52000,'fruits');
insert into products(productid,productname)values(128,'mi');
select * from products;
update products set productprice=44000 where productid=123;

delete from products where productCategory='fruits';

select productid,productname from products;

select * from products where productprice between 10000 and 35000;
select * from products where productprice >35000;
select max(productprice) from products;
select min(productprice) from products;
select avg(productprice) from products;
select sum(productprice) from products;
select count(productprice) from products;


insert into products values(123,'samsung',34000,'electronics');

create table employees(empid int primary key,ename varchar(12) not null,esal int check(esal>1000),edesg varchar(10));

#notnull,check,unique,pk,fk 

insert into employees values(111,'suresh',9000,"developer");
insert into employees values(112,'naresh',12000,"trainer");
insert into employees values(114,'sandeep',500,"admin");
insert into employees(ename,esal) values('hitesh',18000);
select * from employees;

servlets
=========
	web application--url-

sun micro system

javax.servlet.http

1)implements Servlet	5 methods-->init,service,destroy,getServletInfo,getServletConfig
2)extends GenericServlet
3)extends HttpServlet
										@Webservlet
	class Login implements Servlet
	{
	
	}
	class Login extends GenericServlet
	{
	
	}
	class Login extends HttpServlet -->12    1000*12=12000
	{
	
	}
	
	server
	
		application server:apache=tomcat
	
	web.xml
	
	server-->servletcontainer

session tracking
techniques

1.cookies			Cookie ck=new Cookie();addCookie("key","")--->setMaxAge		-->getCokies
2.httpsession			
3.url rewriting
4.hidden form fields

http-->stateless protocol

Jsp
-->java server pages 

	1)server 
	2)java & Html
	
	JSP-->
		1)refresh the browser
		2)java & html together
		
		implicit object
		
		
		
		
		
		request
		response
		out
		
	jsp
	<h1>
	
	<%
	
	
	%>
	
	
		
spring framework
=================

	spring is non-invasive framework,which is used to create light weight  and loosley coupled application.
	
		20+ modules
	


			invasive
						struts--it will force the developer to implement predefined api-->heavy weight 
			non-invasive
							it will never force to the developer -->light weight 
				spring,hibernate

	loosley coupled 
	tightly coupled

				EJB-->heavy weight -->rod johnson

		2003-->interface21-->spring 1.x 
		
							 spring 6.x


class A
{
	A(String name){
	
	}

}


class B
{

public void m1()
{		
	A a=new A();
	
}



}
1000 child 

spring core module/IOC/Dependency injection module

jars

	loosley coupled 


setter injection 
constructor injection
autowiring 


			A

						spring contianer --->Beanfactory,ApplicationContext


			B
																				configuration
container						beans,bean,property,constructor-arg			1)xml
																			2)annotation
		object life cycle													3)java config				
			creation of object
			wiring 
			configuring
			destroying
		
		
		
NOTE:
	spring has given annotations for user defined classes but not for predefined classes
		
		
		

@Component
@Service
@Repository

@Configuration
@ComponentScan
@Autowired
@Scope
@Qualifier
@Entity
@GeneratedValue
@Id
@Column
@Table
@OnetoOne
@OnetoMany
@Manytomany


java configuration-->

		@Bean
		public DataSource getDataSource()
		{
		 return datasource;
		}

5 steps
	loading the driver class
	creating the connection
	creating statement
	executing query
	close the connection

jpa hibernate

	java persistance api
	
			-->no table creation
			-->no querys
			-->cache 
			-->no exception handling 
			-->JPQl

JPA		-->specification
ORM-->hibernate,eclipselink,toplink,ibatis,...

Object


Mysql

spring + JPA(hibernate)
		case study	
		hibernate non-invasive framework

spring mvc   


		mvc -->
		spring mvc-->front controller-->DispatcherServlet

@Controller
@RequestMapping(  method=MethodType,GET/POST/PUT/DELETE)

	spring java config

Layered Architecture:-
=====================
			presentation/UI layer
					UI code
			
			service /business layer
					business logic
	
			Repository/DAO alyer
				DB interaction code
				
				
				

spring boot
springboot-->Auto configuration



Spring Boot
============

1)Auto configuration
2)embeded server
3)starters
4)actuators


STS

	3.x






server.port=8586
spring.datasource.url=jdbc:mysql://localhost:3306/hpe
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=rpsconsulting
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.ddl-auto=create
#spring.security.user.name=nec
#spring.security.user.password=nec123











